// gbfs-watcher: API and logger for GBFS endpoints
// Copyright (C) 2022  Rémi Dupré
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

use std::path::PathBuf;

use clap::Parser;
use futures::StreamExt;
use tokio::fs::File;

use gbfs_watcher::gbfs::models;
use gbfs_watcher::storage::journal::stream_from_current_pos;

/// Inspect content of a journal file generated by the server.
///
/// gbfs-watcher  Copyright (C) 2022  Rémi Dupré <remi@dupre.io>
///
/// This program comes with ABSOLUTELY NO WARRANTY'. This is free software, and
/// you are welcome to redistribute it under certain conditions.
#[derive(Parser)]
#[command(author, version, about, verbatim_doc_comment)]
pub struct Args {
    #[clap(required = true)]
    path: Vec<PathBuf>,
}

#[tokio::main(flavor = "current_thread")]
async fn main() {
    let args = Args::parse();

    for path in args.path {
        let journal = File::open(path).await.expect("failed to open journal");

        stream_from_current_pos(journal)
            .await
            .expect("failed to stream journal")
            .map(|res| res.expect("failed to read journal entry"))
            .for_each(|obj: models::StationStatus| {
                let json = serde_json::to_string(&obj).expect("failed to build json");
                println!("{}", json);
                futures::future::ready(())
            })
            .await;
    }
}
